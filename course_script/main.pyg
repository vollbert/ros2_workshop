import math
import rclpy
from rclpy.node import Node

from std_msgs.msg import Float32
from std_srvs.srv import Trigger


class ControlServo(Node):

    def __init__(self):
        super().__init__("control_servo")
        self.service_enable_torque = self.create_client(Trigger,
        "/olive/servo/pan/setTorqueEnable")
        self.service_disable_torque = self.create_client(Trigger,
        "/olive/servo/pan/setTorqueDisable")
        while not self.service_enable_torque.wait_for_service(timeout_sec=1.0):
            self.get_logger().info("service not available")
        while not self.service_disable_torque.wait_for_service(timeout_sec=1.0):
            self.get_logger().info("service not available")
        self.request_enable_torque = Trigger.Request()
        self.request_disable_torque = Trigger.Request()
        self.topic_gp = "/olive/servo/pan/goal/position"
        self.publisher = self.create_publisher(Float32, self.topic_gp, 10)
        self.timer = self.create_timer(3.0, self.publish_goal)
        self.state = True

    def enable_torque(self):
        self.future = self.service_enable_torque.call_async(self.request_enable_torque)
        rclpy.spin_until_future_complete(self, self.future)

    def disable_torque(self):
        self.future = self.service_disable_torque.call_async(self.request_disable_torque)
        rclpy.spin_until_future_complete(self, self.future)

    def publish_goal(self):
        msg = Float32()

        if self.state == True:
            msg.data = 1.57
            self.state = False
        else:
            msg.data = 0.0
            self.state = True

        self.publisher.publish(msg)

def main():
    rclpy.init()
    cntrl_publisher = ControlServo()

    try:
        cntrl_publisher.enable_torque()
        rclpy.spin(cntrl_publisher)
    except KeyboardInterrupt:
        cntrl_publisher.disable_torque()
        cntrl_publisher.destroy_node()
        rclpy.shutdown()

if __name__ == "__main__":
    main()
